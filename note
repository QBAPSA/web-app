create table
  public.attendance_log (
    attendance_id bigint generated by default as identity not null,
    student_assign_id bigint null,
    teacher_assign_id bigint null,
    date date null,
    status text null,
    constraint attendance_log_pkey primary key (attendance_id),
    constraint attendance_log_student_assign_id_fkey foreign key (student_assign_id) references student_assign (student_assign_id),
    constraint attendance_log_teacher_assign_id_fkey foreign key (teacher_assign_id) references teacher_assign (teacher_assign_id)
  ) tablespace pg_default;



  create table
  public.student_assign (
    student_assign_id bigint generated by default as identity not null,
    student_lrn text null,
    section_id bigint null,
    status text null,
    constraint student_assign_pkey primary key (student_assign_id),
    constraint student_assign_section_id_fkey foreign key (section_id) references sections (section_id),
    constraint student_assign_student_lrn_fkey foreign key (student_lrn) references students (student_lrn)
  ) tablespace pg_default;



  create table
  public.students (
    last_name text null,
    first_name text null,
    middle_name text null,
    student_lrn text not null,
    contact_number text null,
    parent_name text null,
    address text null,
    constraint students_pkey primary key (student_lrn)
  ) tablespace pg_default;


  create table
  public.teacher_assign (
    teacher_assign_id bigint generated by default as identity not null,
    teacher_id smallint null,
    subject_id bigint null,
    section_id bigint null,
    time_start time without time zone null,
    time_end time without time zone null,
    constraint teacher_assign_pkey primary key (teacher_assign_id),
    constraint teacher_assign_section_id_fkey foreign key (section_id) references sections (section_id),
    constraint teacher_assign_subject_id_fkey foreign key (subject_id) references subjects (subject_id),
    constraint teacher_assign_teacher_id_fkey foreign key (teacher_id) references teachers (teacher_id)
  ) tablespace pg_default;


  create table
  public.teachers (
    teacher_id smallint generated by default as identity not null,
    teacher text not null,
    username text not null,
    password text not null,
    email text not null,
    constraint teachers_pkey primary key (teacher_id)
  ) tablespace pg_default;



  query that display the student_assign_id,full_name, attendace_status, and attendance_date








  import React, { useState, useEffect } from 'react';
import { supabase } from '../lib/supabaseClient'; // Adjust according to your setup

const Attendance = () => {
  const [attendanceData, setAttendanceData] = useState([]);
  const [error, setError] = useState(null);

  const fetchAttendanceData = async () => {
    try {
      // Fetching attendance data with the related student and attendance_log data
      const { data, error } = await supabase
        .from('student_assign')
        .select(`
          student_assign_id,
          students!inner(last_name, first_name),
          attendance_log!left(status, date)
        `);

      // Check for any error in the query
      if (error) {
        throw error;
      }

      // Set the fetched data in the state
      setAttendanceData(data);
    } catch (err) {
      // Handle any errors
      setError(err.message);
      console.error('Error fetching data:', err.message);
    }
  };

  useEffect(() => {
    fetchAttendanceData();
  }, []); // Run once when the component mounts

  return (
    <div>
      <h1>Attendance Data</h1>
      {error && <p style={{ color: 'red' }}>Error: {error}</p>}
      <table>
        <thead>
          <tr>
            <th>Student Assign ID</th>
            <th>Full Name</th>
            <th>Attendance Status</th>
            <th>Attendance Date</th>
          </tr>
        </thead>
        <tbody>
          {attendanceData.length > 0 ? (
            attendanceData.map((entry) => (
              <tr key={entry.student_assign_id}>
                <td>{entry.student_assign_id}</td>
                <td>{`${entry.students.last_name}, ${entry.students.first_name}`}</td>
                <td>{entry.attendance_log?.status || 'absent'}</td>
                <td>{entry.attendance_log?.date || 'N/A'}</td>
              </tr>
            ))
          ) : (
            <tr>
              <td colSpan="4">No attendance data found.</td>
            </tr>
          )}
        </tbody>
      </table>
    </div>
  );
};

export default Attendance;











kalansay



import React, { useState, useEffect } from 'react';
import { supabase } from '../lib/supabaseClient'; // Adjust according to your setup

const Attendance = () => {
  const [attendanceData, setAttendanceData] = useState([]);
  const [error, setError] = useState(null);

  const fetchAttendanceData = async () => {
    try {
      // Fetching attendance data with the related student and attendance_log data
      const { data, error } = await supabase
        .from('student_assign')
        .select(`
          student_assign_id,
          students!inner(last_name, first_name),
          attendance_log!left(status, date)
        `);

      // Check for any error in the query
      if (error) {
        throw error;
      }

      // Set the fetched data in the state
      setAttendanceData(data);
    } catch (err) {
      // Handle any errors
      setError(err.message);
      console.error('Error fetching data:', err.message);
    }
  };

  useEffect(() => {
    fetchAttendanceData();
  }, []); // Run once when the component mounts

  return (
    <div>
      <h1>Attendance Data</h1>
      {error && <p style={{ color: 'red' }}>Error: {error}</p>}
      <table>
        <thead>
          <tr>
            <th>Student Assign ID</th>
            <th>Full Name</th>
            <th>Attendance Status</th>
            <th>Attendance Date</th>
          </tr>
        </thead>
        <tbody>
          {attendanceData.length > 0 ? (
            attendanceData.map((entry) => (
              <tr key={entry.student_assign_id}>
                <td>{entry.student_assign_id}</td>
                <td>{`${entry.students.last_name}, ${entry.students.first_name}`}</td>
                <td>{entry.attendance_log?.status || 'absent'}</td>
                <td>{entry.attendance_log?.date || 'N/A'}</td>
              </tr>
            ))
          ) : (
            <tr>
              <td colSpan="4">No attendance data found.</td>
            </tr>
          )}
        </tbody>
      </table>
    </div>
  );
};

export default Attendance;







table green




import React, { useState, useEffect } from 'react';
import { supabase } from '../lib/supabaseClient'; // Adjust according to your setup
import '../styles/Attendance.css';

const Attendance = () => {
  const [attendanceData, setAttendanceData] = useState([]);
  const [error, setError] = useState(null);

  const fetchAttendanceData = async () => {
    try {
      const { data, error } = await supabase
        .from('student_assign')
        .select(`
          student_assign_id,
          students!inner(last_name, first_name),
          attendance_log!left(status, date)
        `);

      if (error) {
        throw error;
      }

      setAttendanceData(data);
    } catch (err) {
      setError(err.message);
      console.error('Error fetching data:', err.message);
    }
  };

  useEffect(() => {
    fetchAttendanceData();
  }, []);

  return (
    <div>
      <h1>Attendance Data</h1>
      {error && <p className="error-message">Error: {error}</p>}
      <table>
        <thead>
          <tr>
            <th>Student Assign ID</th>
            <th>Full Name</th>
            <th>Attendance Status</th>
            <th>Attendance Date</th>
          </tr>
        </thead>
        <tbody>
          {attendanceData.length > 0 ? (
            attendanceData.map((entry) => (
              <tr key={entry.student_assign_id}>
                <td>{entry.student_assign_id}</td>
                <td>{`${entry.students.last_name}, ${entry.students.first_name}`}</td>
                <td>{entry.attendance_log?.status || 'absent'}</td>
                <td>{entry.attendance_log?.date || 'N/A'}</td>
              </tr>
            ))
          ) : (
            <tr>
              <td colSpan="4">No attendance data found.</td>
            </tr>
          )}
        </tbody>
      </table>
    </div>
  );
};

export default Attendance;











create table
  public.attendance_log (
    attendance_id bigint generated by default as identity not null,
    student_assign_id bigint null,
    teacher_assign_id bigint null,
    date date null,
    status text null,
    constraint attendance_log_pkey primary key (attendance_id),
    constraint attendance_log_student_assign_id_fkey foreign key (student_assign_id) references student_assign (student_assign_id),
    constraint attendance_log_teacher_assign_id_fkey foreign key (teacher_assign_id) references teacher_assign (teacher_assign_id)
  ) tablespace pg_default;


WWWWWOOOOOOOWWWW

import React, { useState, useEffect } from 'react';
import { supabase } from '../lib/supabaseClient'; // Adjust according to your setup
import '../styles/Attendance.css';

const Attendance = () => {
  const [attendanceData, setAttendanceData] = useState([]);
  const [error, setError] = useState(null);

  const fetchAttendanceData = async () => {
    try {
      const { data, error } = await supabase
        .from('student_assign')
        .select(`
          student_assign_id,
          students!inner(last_name, first_name),
          attendance_log!left(status, date)
        `);

      if (error) {
        throw error;
      }

      // Transform the data to match your SQL query
      const formattedData = data.map(entry => {
        const fullName = `${entry.students.last_name}, ${entry.students.first_name}`;
        const attendanceStatus = entry.attendance_log?.status || 'present'; // Default to 'present'
        const attendanceDate = entry.attendance_log?.date || 'N/A';

        return {
          student_assign_id: entry.student_assign_id,
          full_name: fullName,
          attendance_status: attendanceStatus,
          attendance_date: attendanceDate,
        };
      });

      setAttendanceData(formattedData);
    } catch (err) {
      setError(err.message);
      console.error('Error fetching data:', err.message);
    }
  };

  const toggleAttendanceStatus = async (studentAssignId, currentStatus) => {
    const newStatus = currentStatus === 'present' ? 'absent' : 'present';
    
    // Update the status in the database (assuming there's a table to update attendance)
    const { error } = await supabase
      .from('attendance_log')
      .update({ status: newStatus })
      .match({ student_assign_id: studentAssignId });

    if (error) {
      console.error('Error updating attendance:', error.message);
    } else {
      // Update the local state
      setAttendanceData(prevData =>
        prevData.map(entry =>
          entry.student_assign_id === studentAssignId
            ? { ...entry, attendance_status: newStatus }
            : entry
        )
      );
    }
  };

  useEffect(() => {
    fetchAttendanceData();
  }, []);

  return (
    <div>
      <h1>Attendance Data</h1>
      {error && <p className="error-message">Error: {error}</p>}
      <table>
        <thead>
          <tr>
            <th>Student Assign ID</th>
            <th>Full Name</th>
            <th>Attendance Status</th>
            <th>Attendance Date</th>
          </tr>
        </thead>
        <tbody>
          {attendanceData.length > 0 ? (
            attendanceData.map((entry) => (
              <tr key={entry.student_assign_id}>
                <td>{entry.student_assign_id}</td>
                <td>{entry.full_name}</td>
                <td>
                  <div
                    className={`attendance-status ${entry.attendance_status === 'present' ? 'present' : 'absent'}`}
                    onClick={() => toggleAttendanceStatus(entry.student_assign_id, entry.attendance_status)}
                  >
                    {entry.attendance_status === 'present' ? '✔' : '✘'}
                  </div>
                </td>
                <td>{entry.attendance_date}</td>
              </tr>
            ))
          ) : (
            <tr>
              <td colSpan="4">No attendance data found.</td>
            </tr>
          )}
        </tbody>
      </table>
    </div>
  );
};

export default Attendance;
